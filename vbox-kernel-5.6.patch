diff -up linux-5.6-rc4/drivers/net/vboxnetadp/include/iprt/time.h.302a~ linux-5.6-rc4/drivers/net/vboxnetadp/include/iprt/time.h
--- linux-5.6-rc4/drivers/net/vboxnetadp/include/iprt/time.h.302a~	2020-01-13 11:44:20.000000000 +0100
+++ linux-5.6-rc4/drivers/net/vboxnetadp/include/iprt/time.h	2020-03-03 04:29:44.706626571 +0100
@@ -357,7 +357,7 @@ DECLINLINE(void) RTTimeSpecGetSecondsAnd
 
 
 /* PORTME: Add struct timeval guard macro here. */
-#if defined(RTTIME_INCL_TIMEVAL) || defined(_STRUCT_TIMEVAL) || defined(_SYS__TIMEVAL_H_) || defined(_SYS_TIME_H) || defined(_TIMEVAL) || defined(_LINUX_TIME_H) \
+#if 0 && defined(RTTIME_INCL_TIMEVAL) || defined(_STRUCT_TIMEVAL) || defined(_SYS__TIMEVAL_H_) || defined(_SYS_TIME_H) || defined(_TIMEVAL) || defined(_LINUX_TIME_H) \
  || (defined(RT_OS_NETBSD) && defined(_SYS_TIME_H_))
 /**
  * Gets the time as POSIX timeval.
@@ -433,7 +433,7 @@ DECLINLINE(PRTTIMESPEC) RTTimeSpecSetTim
 }
 
 
-# ifdef _LINUX_TIME64_H
+# if 1 //def _LINUX_TIME64_H
 DECLINLINE(PRTTIMESPEC) RTTimeSpecSetTimespec64(PRTTIMESPEC pTime, const struct timespec64 *pTimeval)
 {
     return RTTimeSpecAddNano(RTTimeSpecSetSeconds(pTime, pTimeval->tv_sec), pTimeval->tv_nsec);
diff -up linux-5.6-rc4/drivers/net/vboxnetflt/include/iprt/time.h.302a~ linux-5.6-rc4/drivers/net/vboxnetflt/include/iprt/time.h
--- linux-5.6-rc4/drivers/net/vboxnetflt/include/iprt/time.h.302a~	2020-01-13 11:44:20.000000000 +0100
+++ linux-5.6-rc4/drivers/net/vboxnetflt/include/iprt/time.h	2020-03-03 16:55:57.194735855 +0100
@@ -357,8 +357,8 @@ DECLINLINE(void) RTTimeSpecGetSecondsAnd
 
 
 /* PORTME: Add struct timeval guard macro here. */
-#if defined(RTTIME_INCL_TIMEVAL) || defined(_STRUCT_TIMEVAL) || defined(_SYS__TIMEVAL_H_) || defined(_SYS_TIME_H) || defined(_TIMEVAL) || defined(_LINUX_TIME_H) \
- || (defined(RT_OS_NETBSD) && defined(_SYS_TIME_H_))
+#if 0 && (defined(RTTIME_INCL_TIMEVAL) || defined(_STRUCT_TIMEVAL) || defined(_SYS__TIMEVAL_H_) || defined(_SYS_TIME_H) || defined(_TIMEVAL) || defined(_LINUX_TIME_H) \
+ || (defined(RT_OS_NETBSD) && defined(_SYS_TIME_H_)))
 /**
  * Gets the time as POSIX timeval.
  *
@@ -433,7 +433,7 @@ DECLINLINE(PRTTIMESPEC) RTTimeSpecSetTim
 }
 
 
-# ifdef _LINUX_TIME64_H
+# if 1 //def _LINUX_TIME64_H
 DECLINLINE(PRTTIMESPEC) RTTimeSpecSetTimespec64(PRTTIMESPEC pTime, const struct timespec64 *pTimeval)
 {
     return RTTimeSpecAddNano(RTTimeSpecSetSeconds(pTime, pTimeval->tv_sec), pTimeval->tv_nsec);
diff -up linux-5.6-rc4/drivers/pci/vboxpci/include/iprt/time.h.302a~ linux-5.6-rc4/drivers/pci/vboxpci/include/iprt/time.h
--- linux-5.6-rc4/drivers/pci/vboxpci/include/iprt/time.h.302a~	2020-01-13 11:44:20.000000000 +0100
+++ linux-5.6-rc4/drivers/pci/vboxpci/include/iprt/time.h	2020-03-03 04:29:44.707626571 +0100
@@ -357,7 +357,7 @@ DECLINLINE(void) RTTimeSpecGetSecondsAnd
 
 
 /* PORTME: Add struct timeval guard macro here. */
-#if defined(RTTIME_INCL_TIMEVAL) || defined(_STRUCT_TIMEVAL) || defined(_SYS__TIMEVAL_H_) || defined(_SYS_TIME_H) || defined(_TIMEVAL) || defined(_LINUX_TIME_H) \
+#if 0 && defined(RTTIME_INCL_TIMEVAL) || defined(_STRUCT_TIMEVAL) || defined(_SYS__TIMEVAL_H_) || defined(_SYS_TIME_H) || defined(_TIMEVAL) || defined(_LINUX_TIME_H) \
  || (defined(RT_OS_NETBSD) && defined(_SYS_TIME_H_))
 /**
  * Gets the time as POSIX timeval.
@@ -433,7 +433,7 @@ DECLINLINE(PRTTIMESPEC) RTTimeSpecSetTim
 }
 
 
-# ifdef _LINUX_TIME64_H
+# if 1 //def _LINUX_TIME64_H
 DECLINLINE(PRTTIMESPEC) RTTimeSpecSetTimespec64(PRTTIMESPEC pTime, const struct timespec64 *pTimeval)
 {
     return RTTimeSpecAddNano(RTTimeSpecSetSeconds(pTime, pTimeval->tv_sec), pTimeval->tv_nsec);
diff -up linux-5.6-rc4/drivers/pci/vboxpci/linux/VBoxPci-linux.c.302a~ linux-5.6-rc4/drivers/pci/vboxpci/linux/VBoxPci-linux.c
--- linux-5.6-rc4/drivers/pci/vboxpci/linux/VBoxPci-linux.c.302a~	2020-01-13 11:53:40.000000000 +0100
+++ linux-5.6-rc4/drivers/pci/vboxpci/linux/VBoxPci-linux.c	2020-03-03 04:29:44.705626571 +0100
@@ -843,8 +843,8 @@ DECLHIDDEN(int) vboxPciOsDevMapRegion(PV
         if (!rcLnx)
         {
             /* For now no caching, try to optimize later. */
-            RTR0PTR R0PtrMapping = ioremap_nocache(pci_resource_start(pPciDev, iRegion),
-                                                   pci_resource_len(pPciDev, iRegion));
+            RTR0PTR R0PtrMapping = ioremap(pci_resource_start(pPciDev, iRegion),
+                                           pci_resource_len(pPciDev, iRegion));
 
             if (R0PtrMapping != NIL_RTR0PTR)
                 pIns->aRegionR0Mapping[iRegion] = R0PtrMapping;
diff -up linux-5.6-rc4/drivers/virt/vboxdrv/include/iprt/time.h.302a~ linux-5.6-rc4/drivers/virt/vboxdrv/include/iprt/time.h
--- linux-5.6-rc4/drivers/virt/vboxdrv/include/iprt/time.h.302a~	2020-01-13 11:44:20.000000000 +0100
+++ linux-5.6-rc4/drivers/virt/vboxdrv/include/iprt/time.h	2020-03-03 17:07:41.953706093 +0100
@@ -357,8 +357,8 @@ DECLINLINE(void) RTTimeSpecGetSecondsAnd
 
 
 /* PORTME: Add struct timeval guard macro here. */
-#if defined(RTTIME_INCL_TIMEVAL) || defined(_STRUCT_TIMEVAL) || defined(_SYS__TIMEVAL_H_) || defined(_SYS_TIME_H) || defined(_TIMEVAL) || defined(_LINUX_TIME_H) \
- || (defined(RT_OS_NETBSD) && defined(_SYS_TIME_H_))
+#if 0 && (defined(RTTIME_INCL_TIMEVAL) || defined(_STRUCT_TIMEVAL) || defined(_SYS__TIMEVAL_H_) || defined(_SYS_TIME_H) || defined(_TIMEVAL) || defined(_LINUX_TIME_H) \
+ || (defined(RT_OS_NETBSD) && defined(_SYS_TIME_H_)))
 /**
  * Gets the time as POSIX timeval.
  *
@@ -433,7 +433,7 @@ DECLINLINE(PRTTIMESPEC) RTTimeSpecSetTim
 }
 
 
-# ifdef _LINUX_TIME64_H
+# if 1 //def _LINUX_TIME64_H
 DECLINLINE(PRTTIMESPEC) RTTimeSpecSetTimespec64(PRTTIMESPEC pTime, const struct timespec64 *pTimeval)
 {
     return RTTimeSpecAddNano(RTTimeSpecSetSeconds(pTime, pTimeval->tv_sec), pTimeval->tv_nsec);
diff -up linux-5.6-rc4/drivers/virt/vboxdrv/r0drv/linux/memobj-r0drv-linux.c.302a~ linux-5.6-rc4/drivers/virt/vboxdrv/r0drv/linux/memobj-r0drv-linux.c
--- linux-5.6-rc4/drivers/virt/vboxdrv/r0drv/linux/memobj-r0drv-linux.c.302a~	2020-01-13 11:54:19.000000000 +0100
+++ linux-5.6-rc4/drivers/virt/vboxdrv/r0drv/linux/memobj-r0drv-linux.c	2020-03-03 04:29:44.705626571 +0100
@@ -1461,9 +1461,7 @@ DECLHIDDEN(int) rtR0MemObjNativeMapKerne
              * MMIO / physical memory.
              */
             Assert(pMemLnxToMap->Core.enmType == RTR0MEMOBJTYPE_PHYS && !pMemLnxToMap->Core.u.Phys.fAllocated);
-            pMemLnx->Core.pv = pMemLnxToMap->Core.u.Phys.uCachePolicy == RTMEM_CACHE_POLICY_MMIO
-                             ? ioremap_nocache(pMemLnxToMap->Core.u.Phys.PhysBase + offSub, cbSub)
-                             : ioremap(pMemLnxToMap->Core.u.Phys.PhysBase + offSub, cbSub);
+            pMemLnx->Core.pv = ioremap(pMemLnxToMap->Core.u.Phys.PhysBase + offSub, cbSub);
             if (pMemLnx->Core.pv)
             {
                 /** @todo fix protection. */
diff -up linux-5.6-rc4/virt/kvm/kvm_main.c.302a~ linux-5.6-rc4/virt/kvm/kvm_main.c
--- linux-5.6-rc4/virt/kvm/kvm_main.c.302a~	2020-03-01 23:38:46.000000000 +0100
+++ linux-5.6-rc4/virt/kvm/kvm_main.c	2020-03-03 04:29:44.706626571 +0100
@@ -2219,7 +2219,7 @@ static int __kvm_gfn_to_hva_cache_init(s
 	gfn_t start_gfn = gpa >> PAGE_SHIFT;
 	gfn_t end_gfn = (gpa + len - 1) >> PAGE_SHIFT;
 	gfn_t nr_pages_needed = end_gfn - start_gfn + 1;
-	gfn_t nr_pages_avail;
+	gfn_t nr_pages_avail = 0;
 
 	/* Update ghc->generation before performing any error checks. */
 	ghc->generation = slots->generation;
diff -up linux-5.6-rc4/drivers/virt/vboxdrv/r0drv/linux/time-r0drv-linux.c.omv~ linux-5.6-rc4/drivers/virt/vboxdrv/r0drv/linux/time-r0drv-linux.c
--- linux-5.6-rc4/drivers/virt/vboxdrv/r0drv/linux/time-r0drv-linux.c.omv~	2020-03-03 17:10:12.583699732 +0100
+++ linux-5.6-rc4/drivers/virt/vboxdrv/r0drv/linux/time-r0drv-linux.c	2020-03-03 17:12:59.803692670 +0100
@@ -34,7 +34,10 @@
 #include <iprt/time.h>
 #include <iprt/asm.h>
 
-
+DECLINLINE(PRTTIMESPEC) RTTimeSpecSetTimespec64(PRTTIMESPEC pTime, const struct timespec64 *pTimeval)
+{
+    return RTTimeSpecAddNano(RTTimeSpecSetSeconds(pTime, pTimeval->tv_sec), pTimeval->tv_nsec);
+}
 
 DECLINLINE(uint64_t) rtTimeGetSystemNanoTS(void)
 {
@@ -43,8 +46,8 @@ DECLINLINE(uint64_t) rtTimeGetSystemNano
      * Use ktime_get_ts, this is also what clock_gettime(CLOCK_MONOTONIC,) is using.
      */
     uint64_t u64;
-    struct timespec Ts;
-    ktime_get_ts(&Ts);
+    struct timespec64 Ts;
+    ktime_get_ts64(&Ts);
     u64 = Ts.tv_sec * RT_NS_1SEC_64 + Ts.tv_nsec;
     return u64;
 
