--- linux-4.15/arch/x86/include/asm/kvm_para.h.0421~	2018-01-28 22:20:33.000000000 +0100
+++ linux-4.15/arch/x86/include/asm/kvm_para.h	2018-02-12 12:34:24.909687261 +0100
@@ -92,6 +92,28 @@ void kvm_async_pf_task_wait(u32 token, i
 void kvm_async_pf_task_wake(u32 token);
 u32 kvm_read_and_reset_pf_reason(void);
 extern void kvm_disable_steal_time(void);
+void kvm_arch_return_memory(struct page *page, unsigned int order);
+
+/*
+ * This order has been found in an empirical way, running memory tests
+ * through many iterations to assess the number of hypercalls issued
+ * and the amount of memory returned. In case you change this order to
+ * 6 or 8, it should not impact your performances significantly.
+ *
+ * Smaller values lead to less memory waste, but consume more CPU on
+ * hypercalls. Larger values use less CPU, but do not as precisely
+ * inform the hypervisor of which memory is free.
+ */
+#define RET_MEM_BUDDY_ORDER 7
+
+static inline void arch_buddy_merge(struct page *page, unsigned int order)
+{
+	if (order < RET_MEM_BUDDY_ORDER)
+		return;
+
+	kvm_arch_return_memory(page, order);
+}
+#define arch_buddy_merge arch_buddy_merge
 
 #ifdef CONFIG_PARAVIRT_SPINLOCKS
 void __init kvm_spinlock_init(void);
--- linux-4.15/arch/x86/kernel/kvm.c.0421~	2018-02-12 12:34:24.909687261 +0100
+++ linux-4.15/arch/x86/kernel/kvm.c	2018-02-12 13:19:43.422948592 +0100
@@ -645,6 +645,16 @@ static __init int kvm_setup_pv_tlb_flush
 }
 arch_initcall(kvm_setup_pv_tlb_flush);
 
+void kvm_arch_return_memory(struct page *page, unsigned int order)
+{
+	if (!kvm_para_available())
+		return;
+
+	kvm_hypercall2(KVM_HC_RETURN_MEM,
+		       page_to_phys(page),
+		       PAGE_SIZE << order);
+}
+
 #ifdef CONFIG_PARAVIRT_SPINLOCKS
 
 /* Kick a cpu by its apicid. Used to wake up a halted vcpu */
--- linux-4.15/include/linux/mm-arch-hooks.h.0421~	2018-01-28 22:20:33.000000000 +0100
+++ linux-4.15/include/linux/mm-arch-hooks.h	2018-02-12 12:34:24.909687261 +0100
@@ -12,6 +12,7 @@
 #define _LINUX_MM_ARCH_HOOKS_H
 
 #include <asm/mm-arch-hooks.h>
+#include <asm/kvm_para.h>
 
 #ifndef arch_remap
 static inline void arch_remap(struct mm_struct *mm,
@@ -22,4 +23,11 @@ static inline void arch_remap(struct mm_
 #define arch_remap arch_remap
 #endif
 
+#ifndef arch_buddy_merge
+static inline void arch_buddy_merge(struct page *page, unsigned int order)
+{
+}
+#define arch_buddy_merge arch_buddy_merge
+#endif
+
 #endif /* _LINUX_MM_ARCH_HOOKS_H */
--- linux-4.15/mm/page_alloc.c.0421~	2018-02-12 12:34:24.721686723 +0100
+++ linux-4.15/mm/page_alloc.c	2018-02-12 12:34:24.910687264 +0100
@@ -64,6 +64,7 @@
 #include <linux/page_owner.h>
 #include <linux/kthread.h>
 #include <linux/memcontrol.h>
+#include <linux/mm-arch-hooks.h>
 #include <linux/ftrace.h>
 #include <linux/lockdep.h>
 #include <linux/nmi.h>
@@ -879,6 +880,7 @@ continue_merging:
 	}
 
 done_merging:
+	arch_buddy_merge(page, order);
 	set_page_order(page, order);
 
 	/*
