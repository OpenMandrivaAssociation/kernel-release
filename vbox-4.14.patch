--- linux-4.13/drivers/gpu/drm/vboxvideo/vbox_drv.c.omv~	2017-10-31 21:29:35.426970424 +0100
+++ linux-4.13/drivers/gpu/drm/vboxvideo/vbox_drv.c	2017-10-31 21:31:00.252648312 +0100
@@ -266,7 +266,7 @@ static struct drm_driver driver = {
 	.lastclose = vbox_driver_lastclose,
 	.master_set = vbox_master_set,
 	.master_drop = vbox_master_drop,
-#if LINUX_VERSION_CODE >= KERNEL_VERSION(3, 18, 0) || defined(RHEL_73)
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(3, 18, 0) && LINUX_VERSION_CODE < KERNEL_VERSION(4, 14, 0) || defined(RHEL_73)
 	.set_busid = drm_pci_set_busid,
 #endif
 
@@ -310,12 +310,12 @@ static int __init vbox_init(void)
 	if (vbox_modeset == 0)
 		return -EINVAL;
 
-	return drm_pci_init(&driver, &vbox_pci_driver);
+	return pci_register_driver(&vbox_pci_driver);
 }
 
 static void __exit vbox_exit(void)
 {
-	drm_pci_exit(&driver, &vbox_pci_driver);
+	pci_unregister_driver(&vbox_pci_driver);
 }
 
 module_init(vbox_init);
--- linux-4.13/drivers/gpu/drm/vboxvideo/vbox_fb.c.omv~	2017-10-31 22:52:28.626445095 +0100
+++ linux-4.13/drivers/gpu/drm/vboxvideo/vbox_fb.c	2017-10-31 22:53:39.519132915 +0100
@@ -333,22 +333,7 @@ static int vboxfb_create(struct drm_fb_h
 	return 0;
 }
 
-static void vbox_fb_gamma_set(struct drm_crtc *crtc, u16 red, u16 green,
-			      u16 blue, int regno)
-{
-}
-
-static void vbox_fb_gamma_get(struct drm_crtc *crtc, u16 *red, u16 *green,
-			      u16 *blue, int regno)
-{
-	*red = regno;
-	*green = regno;
-	*blue = regno;
-}
-
 static struct drm_fb_helper_funcs vbox_fb_helper_funcs = {
-	.gamma_set = vbox_fb_gamma_set,
-	.gamma_get = vbox_fb_gamma_get,
 	.fb_probe = vboxfb_create,
 };
 
--- linux-4.13/drivers/gpu/drm/vboxvideo/vbox_mode.c.omv~	2017-10-31 23:25:44.339062868 +0100
+++ linux-4.13/drivers/gpu/drm/vboxvideo/vbox_mode.c	2017-10-31 23:25:58.624359154 +0100
@@ -146,10 +146,6 @@ static int vbox_set_view(struct drm_crtc
 	return 0;
 }
 
-static void vbox_crtc_load_lut(struct drm_crtc *crtc)
-{
-}
-
 static void vbox_crtc_dpms(struct drm_crtc *crtc, int mode)
 {
 	struct vbox_crtc *vbox_crtc = to_vbox_crtc(crtc);
@@ -343,7 +339,6 @@ static const struct drm_crtc_helper_func
 	.mode_set = vbox_crtc_mode_set,
 	/* .mode_set_base = vbox_crtc_mode_set_base, */
 	.disable = vbox_crtc_disable,
-	.load_lut = vbox_crtc_load_lut,
 	.prepare = vbox_crtc_prepare,
 	.commit = vbox_crtc_commit,
 };
--- linux-4.13/drivers/net/vboxnetflt/linux/VBoxNetFlt-linux.c.omv~	2017-10-31 23:32:27.910644131 +0100
+++ linux-4.13/drivers/net/vboxnetflt/linux/VBoxNetFlt-linux.c	2017-10-31 23:34:13.590803390 +0100
@@ -737,9 +737,6 @@ static struct sk_buff *vboxNetFltLinuxSk
         case PDMNETWORKGSOTYPE_IPV4_TCP:
             fGsoType = SKB_GSO_TCPV4;
             break;
-        case PDMNETWORKGSOTYPE_IPV4_UDP:
-            fGsoType = SKB_GSO_UDP;
-            break;
         case PDMNETWORKGSOTYPE_IPV6_TCP:
             fGsoType = SKB_GSO_TCPV6;
             break;
@@ -1273,7 +1270,7 @@ static bool vboxNetFltLinuxCanForwardAsG
      * Check the GSO properties of the socket buffer and make sure it fits.
      */
     /** @todo Figure out how to handle SKB_GSO_TCP_ECN! */
-    if (RT_UNLIKELY( skb_shinfo(pSkb)->gso_type & ~(SKB_GSO_UDP | SKB_GSO_DODGY | SKB_GSO_TCPV6 | SKB_GSO_TCPV4) ))
+    if (RT_UNLIKELY( skb_shinfo(pSkb)->gso_type & ~(SKB_GSO_DODGY | SKB_GSO_TCPV6 | SKB_GSO_TCPV4) ))
     {
         Log5(("vboxNetFltLinuxCanForwardAsGso: gso_type=%#x\n", skb_shinfo(pSkb)->gso_type));
         return false;
@@ -1523,7 +1520,7 @@ static void vboxNetFltLinuxForwardToIntN
         }
 #endif /* !VBOXNETFLT_SG_SUPPORT */
 # ifdef VBOXNETFLT_WITH_GSO_RECV
-        if (   (skb_shinfo(pBuf)->gso_type & (SKB_GSO_UDP | SKB_GSO_TCPV6 | SKB_GSO_TCPV4))
+        if (   (skb_shinfo(pBuf)->gso_type & (SKB_GSO_TCPV6 | SKB_GSO_TCPV4))
             && vboxNetFltLinuxCanForwardAsGso(pThis, pBuf, fSrc, &GsoCtx) )
             vboxNetFltLinuxForwardAsGso(pThis, pBuf, fSrc, &GsoCtx);
         else
--- linux-4.13/drivers/pci/vboxpci/linux/VBoxPci-linux.c.omv~	2017-10-31 23:44:36.246102059 +0100
+++ linux-4.13/drivers/pci/vboxpci/linux/VBoxPci-linux.c	2017-10-31 23:44:52.091880105 +0100
@@ -357,7 +357,7 @@ static int vboxPciFileWrite(struct file*
 
     fs_save = get_fs();
     set_fs(get_ds());
-    ret = vfs_write(file, data, size, &offset);
+    ret = kernel_write(file, data, size, &offset);
     set_fs(fs_save);
     if (ret < 0)
         printk(KERN_DEBUG "vboxPciFileWrite: error %d\n", ret);
