diff -up linux-5.8/drivers/of/address.c.1001~ linux-5.8/drivers/of/address.c
--- linux-5.8/drivers/of/address.c.1001~	2020-10-03 22:01:15.013284932 +0000
+++ linux-5.8/drivers/of/address.c	2020-10-03 22:03:40.427317349 +0000
@@ -939,11 +939,10 @@ int of_dma_get_range(struct device_node
 {
 	struct device_node *node = of_node_get(np);
 	const __be32 *ranges = NULL;
-	int len;
+	int len, naddr, nsize, pna;
 	int ret = 0;
 	bool found_dma_ranges = false;
-	struct of_range_parser parser;
-	struct of_range range;
+	u64 dmaaddr;
 
 	while (node) {
 		ranges = of_get_property(node, "dma-ranges", &len);
@@ -968,18 +967,33 @@ int of_dma_get_range(struct device_node
 		goto out;
 	}
 
-	of_dma_range_parser_init(&parser, node);
-
-	for_each_of_range(&parser, &range) {
-		pr_debug("dma_addr(%llx) cpu_addr(%llx) size(%llx)\n",
-			 range.bus_addr, range.cpu_addr, range.size);
-
-		*dma_addr = range.bus_addr;
-		*paddr = range.cpu_addr;
-		*size = range.size;
+	naddr = of_bus_n_addr_cells(node);
+	nsize = of_bus_n_size_cells(node);
+	pna = of_n_addr_cells(node);
+	if ((len / sizeof(__be32)) % (pna + naddr + nsize)) {
+		ret = -EINVAL;
+		goto out;
 	}
-
-	pr_err("translation of DMA ranges failed on node(%pOF)\n", np);
+ 
+	/* dma-ranges format:
+	 * DMA addr	: naddr cells
+	 * CPU addr	: pna cells
+	 * size		: nsize cells
+	 */
+	dmaaddr = of_read_number(ranges, naddr);
+	*paddr = of_translate_dma_address(node, ranges + naddr);
+	if (*paddr == OF_BAD_ADDR) {
+		pr_err("translation of DMA address(%llx) to CPU address failed node(%pOF)\n",
+		       dmaaddr, np);
+		ret = -EINVAL;
+ 		goto out;
+ 	}
+	*dma_addr = dmaaddr;
+
+	*size = of_read_number(ranges + naddr + pna, nsize);
+ 
+	pr_debug("dma_addr(%llx) cpu_addr(%llx) size(%llx)\n",
+		 *dma_addr, *paddr, *size);
 out:
 	of_node_put(node);
 
