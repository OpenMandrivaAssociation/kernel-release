From: Ben Hutchings <ben@decadent.org.uk>
Date: Tue, 26 Jun 2018 16:59:01 +0100
Subject: Export symbols needed by Android drivers
Bug-Debian: https://bugs.debian.org/901492

We want to enable use of the Android ashmem and binder drivers to
support Anbox, but they should not be built-in as that would waste
resources and increase security attack surface on systems that don't
need them.

Export the currently un-exported symbols they depend on.

---
 fs/file.c           | 5 +++++
 kernel/fork.c       | 1 +
 kernel/sched/core.c | 1 +
 kernel/signal.c     | 1 +
 kernel/task_work.c  | 1 +
 mm/memory.c         | 1 +
 mm/shmem.c          | 1 +
 mm/vmalloc.c        | 2 ++
 security/security.c | 4 ++++
 9 files changed, 17 insertions(+)

diff -uraN linux-5.7.8/fs/file.c omv-linux-5.7.8/fs/file.c
--- linux-5.7.8/fs/file.c	2020-07-09 09:39:40.000000000 +0200
+++ omv-linux-5.7.8/fs/file.c	2020-07-13 15:14:49.188263989 +0200
@@ -409,6 +409,7 @@
 
 	return files;
 }
+EXPORT_SYMBOL_GPL(get_files_struct);
 
 void put_files_struct(struct files_struct *files)
 {
@@ -421,6 +422,7 @@
 		kmem_cache_free(files_cachep, files);
 	}
 }
+EXPORT_SYMBOL_GPL(put_files_struct);
 
 void reset_files_struct(struct files_struct *files)
 {
@@ -534,6 +536,7 @@
 	spin_unlock(&files->file_lock);
 	return error;
 }
+EXPORT_SYMBOL_GPL(__alloc_fd);
 
 static int alloc_fd(unsigned start, unsigned flags)
 {
@@ -612,6 +615,7 @@
 	rcu_assign_pointer(fdt->fd[fd], file);
 	rcu_read_unlock_sched();
 }
+EXPORT_SYMBOL_GPL(__fd_install);
 
 void fd_install(unsigned int fd, struct file *file)
 {
@@ -676,6 +680,7 @@
 	*res = NULL;
 	return -ENOENT;
 }
+EXPORT_SYMBOL(__close_fd_get_file);
 
 void do_close_on_exec(struct files_struct *files)
 {
diff -uraN linux-5.7.8/kernel/fork.c omv-linux-5.7.8/kernel/fork.c
--- linux-5.7.8/kernel/fork.c	2020-07-09 09:39:40.000000000 +0200
+++ omv-linux-5.7.8/kernel/fork.c	2020-07-13 15:15:57.177994389 +0200
@@ -1123,6 +1123,7 @@
 		schedule_work(&mm->async_put_work);
 	}
 }
+EXPORT_SYMBOL_GPL(mmput_async);
 #endif
 
 /**
diff -uraN linux-5.7.8/kernel/sched/core.c omv-linux-5.7.8/kernel/sched/core.c
--- linux-5.7.8/kernel/sched/core.c	2020-07-09 09:39:40.000000000 +0200
+++ omv-linux-5.7.8/kernel/sched/core.c	2020-07-13 15:16:48.193591744 +0200
@@ -4572,6 +4572,7 @@
 	return (nice_rlim <= task_rlimit(p, RLIMIT_NICE) ||
 		capable(CAP_SYS_NICE));
 }
+EXPORT_SYMBOL_GPL(can_nice);
 
 #ifdef __ARCH_WANT_SYS_NICE
 
diff -uraN linux-5.7.8/kernel/signal.c omv-linux-5.7.8/kernel/signal.c
--- linux-5.7.8/kernel/signal.c	2020-07-09 09:39:40.000000000 +0200
+++ omv-linux-5.7.8/kernel/signal.c	2020-07-13 15:18:04.854196194 +0200
@@ -1396,6 +1396,7 @@
 
 	return sighand;
 }
+EXPORT_SYMBOL_GPL(__lock_task_sighand);
 
 /*
  * send signal info to all the members of a group
diff -uraN linux-5.7.8/kernel/task_work.c omv-linux-5.7.8/kernel/task_work.c
--- linux-5.7.8/kernel/task_work.c	2020-07-09 09:39:40.000000000 +0200
+++ omv-linux-5.7.8/kernel/task_work.c	2020-07-13 15:18:57.298331300 +0200
@@ -52,6 +52,7 @@
 
 	return 0;
 }
+EXPORT_SYMBOL(task_work_add);
 
 /**
  * task_work_cancel - cancel a pending work added by task_work_add()
diff -uraN linux-5.7.8/mm/memory.c omv-linux-5.7.8/mm/memory.c
--- linux-5.7.8/mm/memory.c	2020-07-09 09:39:40.000000000 +0200
+++ omv-linux-5.7.8/mm/memory.c	2020-07-13 15:19:48.003475257 +0200
@@ -1370,6 +1370,7 @@
 	mmu_notifier_invalidate_range_end(&range);
 	tlb_finish_mmu(&tlb, start, range.end);
 }
+EXPORT_SYMBOL_GPL(zap_page_range);
 
 /**
  * zap_page_range_single - remove user pages in a given range
diff -uraN linux-5.7.8/mm/shmem.c omv-linux-5.7.8/mm/shmem.c
--- linux-5.7.8/mm/shmem.c	2020-07-09 09:39:40.000000000 +0200
+++ omv-linux-5.7.8/mm/shmem.c	2020-07-13 15:20:27.829371644 +0200
@@ -4185,6 +4185,7 @@
 
 	return 0;
 }
+EXPORT_SYMBOL_GPL(shmem_zero_setup);
 
 /**
  * shmem_read_mapping_page_gfp - read into page cache, using specified page allocation flags.
diff -uraN linux-5.7.8/mm/vmalloc.c omv-linux-5.7.8/mm/vmalloc.c
--- linux-5.7.8/mm/vmalloc.c	2020-07-09 09:39:40.000000000 +0200
+++ omv-linux-5.7.8/mm/vmalloc.c	2020-07-13 15:22:00.544919570 +0200
@@ -2011,6 +2011,7 @@
 {
 	return vmap_page_range_noflush(addr, addr + size, prot, pages);
 }
+EXPORT_SYMBOL_GPL(map_kernel_range_noflush);
 
 /**
  * unmap_kernel_range_noflush - unmap kernel VM area
@@ -2161,6 +2162,7 @@
 				  NUMA_NO_NODE, GFP_KERNEL,
 				  __builtin_return_address(0));
 }
+EXPORT_SYMBOL_GPL(get_vm_area);
 
 struct vm_struct *get_vm_area_caller(unsigned long size, unsigned long flags,
 				const void *caller)
diff -uraN linux-5.7.8/security/security.c omv-linux-5.7.8/security/security.c
--- linux-5.7.8/security/security.c	2020-07-09 09:39:40.000000000 +0200
+++ omv-linux-5.7.8/security/security.c	2020-07-13 15:23:59.601954504 +0200
@@ -725,24 +725,28 @@
 {
 	return call_int_hook(binder_set_context_mgr, 0, mgr);
 }
+EXPORT_SYMBOL_GPL(security_binder_set_context_mgr);
 
 int security_binder_transaction(struct task_struct *from,
 				struct task_struct *to)
 {
 	return call_int_hook(binder_transaction, 0, from, to);
 }
+EXPORT_SYMBOL_GPL(security_binder_transaction);
 
 int security_binder_transfer_binder(struct task_struct *from,
 				    struct task_struct *to)
 {
 	return call_int_hook(binder_transfer_binder, 0, from, to);
 }
+EXPORT_SYMBOL_GPL(security_binder_transfer_binder);
 
 int security_binder_transfer_file(struct task_struct *from,
 				  struct task_struct *to, struct file *file)
 {
 	return call_int_hook(binder_transfer_file, 0, from, to, file);
 }
+EXPORT_SYMBOL_GPL(security_binder_transfer_file);
 
 int security_ptrace_access_check(struct task_struct *child, unsigned int mode)
 {
