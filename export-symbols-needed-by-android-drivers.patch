diff -up linux-5.11/fs/file.c.34~ linux-5.11/fs/file.c
--- linux-5.11/fs/file.c.34~	2021-03-12 15:48:46.284915925 +0100
+++ linux-5.11/fs/file.c	2021-03-12 15:57:46.378020402 +0100
@@ -775,6 +775,7 @@ int close_fd_get_file(unsigned int fd, s
 
 	return ret;
 }
+EXPORT_SYMBOL(close_fd_get_file);
 
 void do_close_on_exec(struct files_struct *files)
 {
diff -up linux-5.11/ipc/msgutil.c.34~ linux-5.11/ipc/msgutil.c
--- linux-5.11/ipc/msgutil.c.34~	2021-02-14 23:32:24.000000000 +0100
+++ linux-5.11/ipc/msgutil.c	2021-03-12 15:48:46.284915925 +0100
@@ -33,6 +33,7 @@ struct ipc_namespace init_ipc_ns = {
 	.ns.ops = &ipcns_operations,
 #endif
 };
+EXPORT_SYMBOL_GPL(init_ipc_ns);
 
 struct msg_msgseg {
 	struct msg_msgseg *next;
diff -up linux-5.11/ipc/namespace.c.34~ linux-5.11/ipc/namespace.c
--- linux-5.11/ipc/namespace.c.34~	2021-02-14 23:32:24.000000000 +0100
+++ linux-5.11/ipc/namespace.c	2021-03-12 15:48:46.284915925 +0100
@@ -172,6 +172,7 @@ void put_ipc_ns(struct ipc_namespace *ns
 			schedule_work(&free_ipc_work);
 	}
 }
+EXPORT_SYMBOL_GPL(put_ipc_ns);
 
 static inline struct ipc_namespace *to_ipc_ns(struct ns_common *ns)
 {
diff -up linux-5.11/kernel/fork.c.34~ linux-5.11/kernel/fork.c
--- linux-5.11/kernel/fork.c.34~	2021-02-14 23:32:24.000000000 +0100
+++ linux-5.11/kernel/fork.c	2021-03-12 15:48:46.284915925 +0100
@@ -1120,6 +1120,7 @@ void mmput_async(struct mm_struct *mm)
 		schedule_work(&mm->async_put_work);
 	}
 }
+EXPORT_SYMBOL_GPL(mmput_async);
 #endif
 
 /**
diff -up linux-5.11/kernel/sched/core.c.34~ linux-5.11/kernel/sched/core.c
--- linux-5.11/kernel/sched/core.c.34~	2021-03-12 15:48:46.221582121 +0100
+++ linux-5.11/kernel/sched/core.c	2021-03-12 15:48:46.284915925 +0100
@@ -5572,6 +5572,7 @@ int can_nice(const struct task_struct *p
 	return (nice_rlim <= task_rlimit(p, RLIMIT_NICE) ||
 		capable(CAP_SYS_NICE));
 }
+EXPORT_SYMBOL_GPL(can_nice);
 
 #ifdef __ARCH_WANT_SYS_NICE
 
diff -up linux-5.11/kernel/signal.c.34~ linux-5.11/kernel/signal.c
--- linux-5.11/kernel/signal.c.34~	2021-02-14 23:32:24.000000000 +0100
+++ linux-5.11/kernel/signal.c	2021-03-12 15:48:46.288249283 +0100
@@ -1397,6 +1397,7 @@ struct sighand_struct *__lock_task_sigha
 
 	return sighand;
 }
+EXPORT_SYMBOL_GPL(__lock_task_sighand);
 
 /*
  * send signal info to all the members of a group
diff -up linux-5.11/kernel/task_work.c.34~ linux-5.11/kernel/task_work.c
--- linux-5.11/kernel/task_work.c.34~	2021-02-14 23:32:24.000000000 +0100
+++ linux-5.11/kernel/task_work.c	2021-03-12 15:48:46.288249283 +0100
@@ -57,6 +57,7 @@ int task_work_add(struct task_struct *ta
 
 	return 0;
 }
+EXPORT_SYMBOL(task_work_add);
 
 /**
  * task_work_cancel - cancel a pending work added by task_work_add()
diff -up linux-5.11/mm/memory.c.34~ linux-5.11/mm/memory.c
--- linux-5.11/mm/memory.c.34~	2021-03-12 15:48:46.221582121 +0100
+++ linux-5.11/mm/memory.c	2021-03-12 15:48:46.288249283 +0100
@@ -1542,6 +1542,7 @@ void zap_page_range(struct vm_area_struc
 	mmu_notifier_invalidate_range_end(&range);
 	tlb_finish_mmu(&tlb, start, range.end);
 }
+EXPORT_SYMBOL_GPL(zap_page_range);
 
 /**
  * zap_page_range_single - remove user pages in a given range
diff -up linux-5.11/mm/shmem.c.34~ linux-5.11/mm/shmem.c
--- linux-5.11/mm/shmem.c.34~	2021-02-14 23:32:24.000000000 +0100
+++ linux-5.11/mm/shmem.c	2021-03-12 15:48:46.288249283 +0100
@@ -4287,6 +4287,7 @@ int shmem_zero_setup(struct vm_area_stru
 
 	return 0;
 }
+EXPORT_SYMBOL_GPL(shmem_zero_setup);
 
 /**
  * shmem_read_mapping_page_gfp - read into page cache, using specified page allocation flags.
diff -up linux-5.11/mm/vmalloc.c.34~ linux-5.11/mm/vmalloc.c
--- linux-5.11/mm/vmalloc.c.34~	2021-03-12 15:48:46.278249208 +0100
+++ linux-5.11/mm/vmalloc.c	2021-03-12 15:48:46.288249283 +0100
@@ -316,6 +316,7 @@ int map_kernel_range_noflush(unsigned lo
 
 	return 0;
 }
+EXPORT_SYMBOL_GPL(map_kernel_range_noflush);
 
 int map_kernel_range(unsigned long start, unsigned long size, pgprot_t prot,
 		struct page **pages)
@@ -2133,6 +2134,7 @@ struct vm_struct *get_vm_area(unsigned l
 				  NUMA_NO_NODE, GFP_KERNEL,
 				  __builtin_return_address(0));
 }
+EXPORT_SYMBOL_GPL(get_vm_area);
 
 struct vm_struct *get_vm_area_caller(unsigned long size, unsigned long flags,
 				const void *caller)
diff -up linux-5.11/security/security.c.34~ linux-5.11/security/security.c
--- linux-5.11/security/security.c.34~	2021-02-14 23:32:24.000000000 +0100
+++ linux-5.11/security/security.c	2021-03-12 15:48:46.288249283 +0100
@@ -727,24 +727,28 @@ int security_binder_set_context_mgr(stru
 {
 	return call_int_hook(binder_set_context_mgr, 0, mgr);
 }
+EXPORT_SYMBOL_GPL(security_binder_set_context_mgr);
 
 int security_binder_transaction(struct task_struct *from,
 				struct task_struct *to)
 {
 	return call_int_hook(binder_transaction, 0, from, to);
 }
+EXPORT_SYMBOL_GPL(security_binder_transaction);
 
 int security_binder_transfer_binder(struct task_struct *from,
 				    struct task_struct *to)
 {
 	return call_int_hook(binder_transfer_binder, 0, from, to);
 }
+EXPORT_SYMBOL_GPL(security_binder_transfer_binder);
 
 int security_binder_transfer_file(struct task_struct *from,
 				  struct task_struct *to, struct file *file)
 {
 	return call_int_hook(binder_transfer_file, 0, from, to, file);
 }
+EXPORT_SYMBOL_GPL(security_binder_transfer_file);
 
 int security_ptrace_access_check(struct task_struct *child, unsigned int mode)
 {
