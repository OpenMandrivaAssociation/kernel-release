diff -up linux-5.8-rc4/fs/file.c.19~ linux-5.8-rc4/fs/file.c
--- linux-5.8-rc4/fs/file.c.19~	2020-07-06 01:20:22.000000000 +0200
+++ linux-5.8-rc4/fs/file.c	2020-07-06 16:29:44.030778649 +0200
@@ -409,6 +409,7 @@ struct files_struct *get_files_struct(st
 
 	return files;
 }
+EXPORT_SYMBOL_GPL(get_files_struct);
 
 void put_files_struct(struct files_struct *files)
 {
@@ -421,6 +422,7 @@ void put_files_struct(struct files_struc
 		kmem_cache_free(files_cachep, files);
 	}
 }
+EXPORT_SYMBOL_GPL(put_files_struct);
 
 void reset_files_struct(struct files_struct *files)
 {
@@ -534,6 +536,7 @@ out:
 	spin_unlock(&files->file_lock);
 	return error;
 }
+EXPORT_SYMBOL_GPL(__alloc_fd);
 
 static int alloc_fd(unsigned start, unsigned flags)
 {
@@ -612,6 +615,7 @@ void __fd_install(struct files_struct *f
 	rcu_assign_pointer(fdt->fd[fd], file);
 	rcu_read_unlock_sched();
 }
+EXPORT_SYMBOL_GPL(__fd_install);
 
 void fd_install(unsigned int fd, struct file *file)
 {
@@ -676,6 +680,7 @@ out_unlock:
 	*res = NULL;
 	return -ENOENT;
 }
+EXPORT_SYMBOL(__close_fd_get_file);
 
 void do_close_on_exec(struct files_struct *files)
 {
diff -up linux-5.8-rc4/kernel/fork.c.19~ linux-5.8-rc4/kernel/fork.c
--- linux-5.8-rc4/kernel/fork.c.19~	2020-07-06 01:20:22.000000000 +0200
+++ linux-5.8-rc4/kernel/fork.c	2020-07-06 16:29:44.030778649 +0200
@@ -1131,6 +1131,7 @@ void mmput_async(struct mm_struct *mm)
 		schedule_work(&mm->async_put_work);
 	}
 }
+EXPORT_SYMBOL_GPL(mmput_async);
 #endif
 
 /**
diff -up linux-5.8-rc4/kernel/sched/core.c.19~ linux-5.8-rc4/kernel/sched/core.c
--- linux-5.8-rc4/kernel/sched/core.c.19~	2020-07-06 01:20:22.000000000 +0200
+++ linux-5.8-rc4/kernel/sched/core.c	2020-07-06 16:29:44.030778649 +0200
@@ -4667,6 +4667,7 @@ int can_nice(const struct task_struct *p
 	return (nice_rlim <= task_rlimit(p, RLIMIT_NICE) ||
 		capable(CAP_SYS_NICE));
 }
+EXPORT_SYMBOL_GPL(can_nice);
 
 #ifdef __ARCH_WANT_SYS_NICE
 
diff -up linux-5.8-rc4/kernel/signal.c.19~ linux-5.8-rc4/kernel/signal.c
--- linux-5.8-rc4/kernel/signal.c.19~	2020-07-06 01:20:22.000000000 +0200
+++ linux-5.8-rc4/kernel/signal.c	2020-07-06 16:29:44.031778664 +0200
@@ -1396,6 +1396,7 @@ struct sighand_struct *__lock_task_sigha
 
 	return sighand;
 }
+EXPORT_SYMBOL_GPL(__lock_task_sighand);
 
 /*
  * send signal info to all the members of a group
diff -up linux-5.8-rc4/kernel/task_work.c.19~ linux-5.8-rc4/kernel/task_work.c
--- linux-5.8-rc4/kernel/task_work.c.19~	2020-07-06 16:29:44.031778664 +0200
+++ linux-5.8-rc4/kernel/task_work.c	2020-07-06 16:31:08.466001784 +0200
@@ -52,6 +52,7 @@ task_work_add(struct task_struct *task,
 
 	return 0;
 }
+EXPORT_SYMBOL(task_work_add);
 
 /**
  * task_work_cancel - cancel a pending work added by task_work_add()
diff -up linux-5.8-rc4/mm/memory.c.19~ linux-5.8-rc4/mm/memory.c
--- linux-5.8-rc4/mm/memory.c.19~	2020-07-06 01:20:22.000000000 +0200
+++ linux-5.8-rc4/mm/memory.c	2020-07-06 16:29:44.031778664 +0200
@@ -1367,6 +1367,7 @@ void zap_page_range(struct vm_area_struc
 	mmu_notifier_invalidate_range_end(&range);
 	tlb_finish_mmu(&tlb, start, range.end);
 }
+EXPORT_SYMBOL_GPL(zap_page_range);
 
 /**
  * zap_page_range_single - remove user pages in a given range
diff -up linux-5.8-rc4/mm/shmem.c.19~ linux-5.8-rc4/mm/shmem.c
--- linux-5.8-rc4/mm/shmem.c.19~	2020-07-06 01:20:22.000000000 +0200
+++ linux-5.8-rc4/mm/shmem.c	2020-07-06 16:29:44.031778664 +0200
@@ -4158,6 +4158,7 @@ int shmem_zero_setup(struct vm_area_stru
 
 	return 0;
 }
+EXPORT_SYMBOL_GPL(shmem_zero_setup);
 
 /**
  * shmem_read_mapping_page_gfp - read into page cache, using specified page allocation flags.
diff -up linux-5.8-rc4/mm/vmalloc.c.19~ linux-5.8-rc4/mm/vmalloc.c
--- linux-5.8-rc4/mm/vmalloc.c.19~	2020-07-06 01:20:22.000000000 +0200
+++ linux-5.8-rc4/mm/vmalloc.c	2020-07-06 16:29:44.032778679 +0200
@@ -315,6 +315,7 @@ int map_kernel_range_noflush(unsigned lo
 
 	return 0;
 }
+EXPORT_SYMBOL_GPL(map_kernel_range_noflush);
 
 int map_kernel_range(unsigned long start, unsigned long size, pgprot_t prot,
 		struct page **pages)
@@ -2147,6 +2148,7 @@ struct vm_struct *get_vm_area(unsigned l
 				  NUMA_NO_NODE, GFP_KERNEL,
 				  __builtin_return_address(0));
 }
+EXPORT_SYMBOL_GPL(get_vm_area);
 
 struct vm_struct *get_vm_area_caller(unsigned long size, unsigned long flags,
 				const void *caller)
diff -up linux-5.8-rc4/security/security.c.19~ linux-5.8-rc4/security/security.c
--- linux-5.8-rc4/security/security.c.19~	2020-07-06 01:20:22.000000000 +0200
+++ linux-5.8-rc4/security/security.c	2020-07-06 16:29:44.032778679 +0200
@@ -725,24 +725,28 @@ int security_binder_set_context_mgr(stru
 {
 	return call_int_hook(binder_set_context_mgr, 0, mgr);
 }
+EXPORT_SYMBOL_GPL(security_binder_set_context_mgr);
 
 int security_binder_transaction(struct task_struct *from,
 				struct task_struct *to)
 {
 	return call_int_hook(binder_transaction, 0, from, to);
 }
+EXPORT_SYMBOL_GPL(security_binder_transaction);
 
 int security_binder_transfer_binder(struct task_struct *from,
 				    struct task_struct *to)
 {
 	return call_int_hook(binder_transfer_binder, 0, from, to);
 }
+EXPORT_SYMBOL_GPL(security_binder_transfer_binder);
 
 int security_binder_transfer_file(struct task_struct *from,
 				  struct task_struct *to, struct file *file)
 {
 	return call_int_hook(binder_transfer_file, 0, from, to, file);
 }
+EXPORT_SYMBOL_GPL(security_binder_transfer_file);
 
 int security_ptrace_access_check(struct task_struct *child, unsigned int mode)
 {
