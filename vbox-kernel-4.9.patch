--- linux-4.8/fs/vboxsf/dirops.c.omv~	2016-10-17 10:05:10.937159229 +0200
+++ linux-4.8/fs/vboxsf/dirops.c	2016-10-17 10:05:54.726891367 +0200
@@ -745,14 +745,18 @@ static int sf_rmdir(struct inode *parent
  * @param old_dentry    old directory cache entry
  * @param new_parent    inode of the new parent directory
  * @param new_dentry    new directory cache entry
+ * @param flags		flags
  * @returns 0 on success, Linux error code otherwise
  */
 static int sf_rename(struct inode *old_parent, struct dentry *old_dentry,
-                     struct inode *new_parent, struct dentry *new_dentry)
+                     struct inode *new_parent, struct dentry *new_dentry, unsigned int flags)
 {
     int err = 0, rc = VINF_SUCCESS;
     struct sf_glob_info *sf_g = GET_GLOB_INFO(old_parent->i_sb);
 
+    if(flags)
+	    return -EINVAL;
+
     TRACE();
 
     if (sf_g != GET_GLOB_INFO(new_parent->i_sb))
--- linux-4.8/drivers/bus/vboxguest/r0drv/linux/memobj-r0drv-linux.c.omv~	2016-10-25 00:34:31.646780516 +0200
+++ linux-4.8/drivers/bus/vboxguest/r0drv/linux/memobj-r0drv-linux.c	2016-10-25 00:35:56.069554548 +0200
@@ -1048,8 +1048,7 @@ DECLHIDDEN(int) rtR0MemObjNativeLockUser
         if (R0Process == RTR0ProcHandleSelf())
             rc = get_user_pages(R3Ptr,                  /* Where from. */
                                 cPages,                 /* How many pages. */
-                                fWrite,                 /* Write to memory. */
-                                fWrite,                 /* force write access. */
+                                fWrite ? FOLL_WRITE : 0,/* Force write to memory. */
                                 &pMemLnx->apPages[0],   /* Page array. */
                                 papVMAs);               /* vmas */
         /*
@@ -1062,8 +1061,7 @@ DECLHIDDEN(int) rtR0MemObjNativeLockUser
                                 pTask->mm,              /* Whose pages. */
                                 R3Ptr,                  /* Where from. */
                                 cPages,                 /* How many pages. */
-                                fWrite,                 /* Write to memory. */
-                                fWrite,                 /* force write access. */
+                                fWrite ? FOLL_WRITE : 0,/* Force write to memory. */
                                 &pMemLnx->apPages[0],   /* Page array. */
                                 papVMAs);               /* vmas */
 #else /* LINUX_VERSION_CODE < KERNEL_VERSION(4, 6, 0) */
--- linux-4.8/drivers/virt/vboxdrv/r0drv/linux/memobj-r0drv-linux.c.omv~	2016-10-26 19:41:06.419533997 +0200
+++ linux-4.8/drivers/virt/vboxdrv/r0drv/linux/memobj-r0drv-linux.c	2016-10-26 19:41:44.373533663 +0200
@@ -1048,8 +1048,7 @@ DECLHIDDEN(int) rtR0MemObjNativeLockUser
         if (R0Process == RTR0ProcHandleSelf())
             rc = get_user_pages(R3Ptr,                  /* Where from. */
                                 cPages,                 /* How many pages. */
-                                fWrite,                 /* Write to memory. */
-                                fWrite,                 /* force write access. */
+                                fWrite ? FOLL_WRITE : 0,/* Write to memory. */
                                 &pMemLnx->apPages[0],   /* Page array. */
                                 papVMAs);               /* vmas */
         /*
@@ -1062,8 +1061,7 @@ DECLHIDDEN(int) rtR0MemObjNativeLockUser
                                 pTask->mm,              /* Whose pages. */
                                 R3Ptr,                  /* Where from. */
                                 cPages,                 /* How many pages. */
-                                fWrite,                 /* Write to memory. */
-                                fWrite,                 /* force write access. */
+                                fWrite ? FOLL_WRITE : 0,/* Write to memory. */
                                 &pMemLnx->apPages[0],   /* Page array. */
                                 papVMAs);               /* vmas */
 #else /* LINUX_VERSION_CODE < KERNEL_VERSION(4, 6, 0) */
--- linux-4.9/drivers/bus/vboxguest/r0drv/linux/memobj-r0drv-linux.c.omv~	2016-12-29 03:20:57.722713355 +0100
+++ linux-4.9/drivers/bus/vboxguest/r0drv/linux/memobj-r0drv-linux.c	2016-12-29 03:22:13.039128552 +0100
@@ -1078,7 +1078,11 @@ DECLHIDDEN(int) rtR0MemObjNativeLockUser
                                 fWrite,                 /* force write access. */
 # endif
                                 &pMemLnx->apPages[0],   /* Page array. */
-                                papVMAs);               /* vmas */
+                                papVMAs                 /* vmas */
+# if LINUX_VERSION_CODE >= KERNEL_VERSION(4, 10, 0)
+				, NULL			/* locked */
+# endif
+			    );
 #else /* LINUX_VERSION_CODE < KERNEL_VERSION(4, 6, 0) */
             rc = get_user_pages(pTask,                  /* Task for fault accounting. */
                                 pTask->mm,              /* Whose pages. */
