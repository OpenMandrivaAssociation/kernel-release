From 8bd652c08ac8662f3ce461c99517fab21b75a1cd Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Bernhard=20Rosenkr=C3=A4nzer?=
 <Bernhard.Rosenkranzer@linaro.org>
Date: Wed, 30 Mar 2016 01:02:19 +0200
Subject: [PATCH 19/30] MIPS: LLVMLinux: Silence variable self-assignment
 warnings.

Replace variable self-assignments with explanatory comments.

This silences a bunch of -Wself-assign warnings reported by clang.
The changed code can be compiled without warnings by both gcc and clang.

Signed-off-by: Toma Tabacu <toma.tabacu@imgtec.com>
---
 arch/mips/math-emu/dp_add.c | 5 +++++
 arch/mips/math-emu/dp_sub.c | 5 +++++
 arch/mips/math-emu/sp_add.c | 5 +++++
 arch/mips/math-emu/sp_sub.c | 5 +++++
 4 files changed, 20 insertions(+)

diff --git a/arch/mips/math-emu/dp_add.c b/arch/mips/math-emu/dp_add.c
index 8954ef031f84..34081484db6c 100644
--- a/arch/mips/math-emu/dp_add.c
+++ b/arch/mips/math-emu/dp_add.c
@@ -151,6 +151,8 @@ union ieee754dp ieee754dp_add(union ieee754dp x, union ieee754dp y)
 		 * leaving result in xm, xs and xe.
 		 */
 		xm = xm + ym;
+		/* xe does not change */
+		/* xs does not change */
 
 		if (xm >> (DP_FBITS + 1 + 3)) { /* carry out */
 			xm = XDPSRS1(xm);
@@ -159,8 +161,11 @@ union ieee754dp ieee754dp_add(union ieee754dp x, union ieee754dp y)
 	} else {
 		if (xm >= ym) {
 			xm = xm - ym;
+			/* xe does not change */
+			/* xs does not change */
 		} else {
 			xm = ym - xm;
+			/* xe does not change */
 			xs = ys;
 		}
 		if (xm == 0)
diff --git a/arch/mips/math-emu/dp_sub.c b/arch/mips/math-emu/dp_sub.c
index fc17a781b9ae..22fac9097e7f 100644
--- a/arch/mips/math-emu/dp_sub.c
+++ b/arch/mips/math-emu/dp_sub.c
@@ -154,6 +154,8 @@ union ieee754dp ieee754dp_sub(union ieee754dp x, union ieee754dp y)
 		/* generate 28 bit result of adding two 27 bit numbers
 		 */
 		xm = xm + ym;
+		/* xe does not change */
+		/* xs does not change */
 
 		if (xm >> (DP_FBITS + 1 + 3)) { /* carry out */
 			xm = XDPSRS1(xm);	/* shift preserving sticky */
@@ -162,8 +164,11 @@ union ieee754dp ieee754dp_sub(union ieee754dp x, union ieee754dp y)
 	} else {
 		if (xm >= ym) {
 			xm = xm - ym;
+			/* xe does not change */
+			/* xs does not change */
 		} else {
 			xm = ym - xm;
+			/* xe does not change */
 			xs = ys;
 		}
 		if (xm == 0) {
diff --git a/arch/mips/math-emu/sp_add.c b/arch/mips/math-emu/sp_add.c
index c55c0c00bca8..91566a8bb8f6 100644
--- a/arch/mips/math-emu/sp_add.c
+++ b/arch/mips/math-emu/sp_add.c
@@ -151,6 +151,8 @@ union ieee754sp ieee754sp_add(union ieee754sp x, union ieee754sp y)
 		 * leaving result in xm, xs and xe.
 		 */
 		xm = xm + ym;
+		/* xe does not change */
+		/* xs does not change */
 
 		if (xm >> (SP_FBITS + 1 + 3)) { /* carry out */
 			SPXSRSX1();
@@ -158,8 +160,11 @@ union ieee754sp ieee754sp_add(union ieee754sp x, union ieee754sp y)
 	} else {
 		if (xm >= ym) {
 			xm = xm - ym;
+			/* xe does not change */
+			/* xs does not change */
 		} else {
 			xm = ym - xm;
+			/* xe does not change */
 			xs = ys;
 		}
 		if (xm == 0)
diff --git a/arch/mips/math-emu/sp_sub.c b/arch/mips/math-emu/sp_sub.c
index dc998ed47295..0bacd49b9815 100644
--- a/arch/mips/math-emu/sp_sub.c
+++ b/arch/mips/math-emu/sp_sub.c
@@ -151,6 +151,8 @@ union ieee754sp ieee754sp_sub(union ieee754sp x, union ieee754sp y)
 		/* generate 28 bit result of adding two 27 bit numbers
 		 */
 		xm = xm + ym;
+		/* xe does not change */
+		/* xs does not change */
 
 		if (xm >> (SP_FBITS + 1 + 3)) { /* carry out */
 			SPXSRSX1();	/* shift preserving sticky */
@@ -158,8 +160,11 @@ union ieee754sp ieee754sp_sub(union ieee754sp x, union ieee754sp y)
 	} else {
 		if (xm >= ym) {
 			xm = xm - ym;
+			/* xe does not change */
+			/* xs does not change */
 		} else {
 			xm = ym - xm;
+			/* xe does not change */
 			xs = ys;
 		}
 		if (xm == 0) {
-- 
2.11.0

