From 0b2388ba1b93f5fed9746a6f24a83e02c5548a62 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Bernhard=20Rosenkr=C3=A4nzer?= <bero@linaro.org>
Date: Thu, 23 Feb 2017 00:33:18 +0100
Subject: [PATCH 12/30] WORKAROUND x86, boot, LLVMLinux: Work around clang
 PR3997
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Clang's intrinsics ignore -mregparm=3 when they fall back to calling the
out-of-line implementations. Putting the args on the stack when memcpy()
expects them in registers is not a recipe for a happy kernel.

This bites with -m32 too, so clang is presumably catastrophically
broken for the i386 kernel until this is fixed, unless I'm missing
something.

For information/testing only; do not apply. With this, I can use
'clang -m16' to build all the kernel's 16-bit code and get a successful
boot.

Not-signed-off-by: David Woodhouse <David.Woodhouse@intel.com>
Forward-ported-by: Jan-Simon Möller <dl9pf@gmx.de>
Forward-ported-by: Bernhard Rosenkränzer <bero@linaro.org>
---
 arch/x86/boot/memory.c | 7 ++++++-
 arch/x86/boot/string.h | 2 ++
 2 files changed, 8 insertions(+), 1 deletion(-)

diff --git a/arch/x86/boot/memory.c b/arch/x86/boot/memory.c
index db75d07c3645..0a61ad084927 100644
--- a/arch/x86/boot/memory.c
+++ b/arch/x86/boot/memory.c
@@ -63,8 +63,13 @@ static int detect_memory_e820(void)
 			count = 0;
 			break;
 		}
-
+#ifdef __clang__
+		/* PR18415, PR3997 */
+		memcpy(desc, &buf, sizeof(*desc));
+		desc++;
+#else
 		*desc++ = buf;
+#endif
 		count++;
 	} while (ireg.ebx && count < ARRAY_SIZE(boot_params.e820_map));
 
diff --git a/arch/x86/boot/string.h b/arch/x86/boot/string.h
index 113588ddb43f..d03f4e21a7f3 100644
--- a/arch/x86/boot/string.h
+++ b/arch/x86/boot/string.h
@@ -10,6 +10,7 @@ void *memcpy(void *dst, const void *src, size_t len);
 void *memset(void *dst, int c, size_t len);
 int memcmp(const void *s1, const void *s2, size_t len);
 
+#ifndef __clang__ /* PR3997, PR18415 */
 /*
  * Access builtin version by default. If one needs to use optimized version,
  * do "undef memcpy" in .c file and link against right string.c
@@ -17,6 +18,7 @@ int memcmp(const void *s1, const void *s2, size_t len);
 #define memcpy(d,s,l) __builtin_memcpy(d,s,l)
 #define memset(d,c,l) __builtin_memset(d,c,l)
 #define memcmp	__builtin_memcmp
+#endif
 
 extern int strcmp(const char *str1, const char *str2);
 extern int strncmp(const char *cs, const char *ct, size_t count);
-- 
2.11.0

